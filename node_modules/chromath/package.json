{
  "name": "chromath",
  "version": "0.0.2",
  "description": "JavaScript color conversion and manipulation functions",
  "main": "chromath.js",
  "repository": {
    "type": "git",
    "url": "git://github.com/jfsiii/chromath.git"
  },
  "homepage": "https://github.com/jfsiii/chromath",
  "keywords": [
    "color",
    "math",
    "rgb",
    "hsl",
    "hsv",
    "hsb",
    "hex",
    "palette",
    "gradient",
    "convert",
    "conversion"
  ],
  "author": {
    "name": "John Schulz",
    "url": "http://JFSIII.org"
  },
  "scripts": {
    "test": "tap test/*.js"
  },
  "devDependencies": {
    "tap": "*",
    "quickcheck": "git://github.com/jfsiii/node-quickcheck.git"
  },
  "license": "MIT",
  "readme": "# chromath\n\n## Overview\n\n  chromath provides provides many color conversion and manipulation functions. \n  \n  You can:\n\n * Create a color from just about any reasonable string\n * Convert from one color space to another (rgb->hex, hsv->hsl, rgb->hex->hsl->rgb)\n * Add two colors (using additive or subtractive color)\n * Get a color scheme (complement, split complement, triad, tetrad, etc) based on a color\n * Lots more. [Take a look at the docs](http://JFSIII.org/project/chromath/docs/)\n\n## Getting started\n  In the browser:\n\n    <script src=\"/path/to/chromath.js\"></script>\n\n  In NodeJS:\n\n    npm install chromath\n\n  then\n\n    var Chromath = require('chromath')\n\n  From there, the usage is identical in both environments.\n\n## Functional or Object-oriented\n  You can use chromath in a functional or object-oriented manner.\n\n    var red = new Chromath('rgb(255, 0, 0)');\n    red.towards('yellow', 0.5).toString(); // #FF7F00\n\n  is the same as\n\n    Chromath.towards('red', 'yellow', 0.5).toString(); // #FF7F00\n\n  The only difference between instance methods and Class methods with\n  the same name (e.g, `Chromath.tint` and `tint`) is that the instance\n  methods pass the instance value as the first argument.\n\n  Here's the definition of `Chromath.prototype.tint`:\n\n    tint: function (by) {\n        return Chromath.tint(this, by);\n    }\n\n  In NodeJS you can only pull in the portions you're interesed in,\n  e.g:\n\n    > var fromRGBToHex = require('chromath').rgb2hex\n    > fromRGBToHex(234, 56, 78)\n    '#EA384E'\n\n## Documentation\n  <http://JFSIII.org/project/chromath/docs/>\n\n## License\n[MIT](http://jfsiii.mit-license.org)",
  "readmeFilename": "README.markdown",
  "_id": "chromath@0.0.2",
  "dist": {
    "shasum": "cc61a8a0b9704089a3d982d5251da725c4e7eb13"
  },
  "_from": "chromath@0.0.2",
  "_resolved": "https://registry.npmjs.org/chromath/-/chromath-0.0.2.tgz"
}
